import streamlit as st
import boto3
from io import BytesIO
import subprocess
import os
import torch
import ember
import json
import argparse

# Set AWS credentials from environment variables
os.environ["AWS_ACCESS_KEY_ID"] = ""
os.environ["AWS_SECRET_ACCESS_KEY"] = ''''''
os.environ["AWS_DEFAULT_REGION"] = "us-east-1"

def preprocess_PE_file(file_path, input_length):
    
    # test_file = open(file_path, 'r', errors="ignore").read() # read PE file
    extract_PE = ember.PEFeatureExtractor() # initialize extractor
    input_PE = extract_PE.feature_vector(file_path) # read feature vector
    input_tensor = torch.tensor(input_PE)
    byte_seq = input_tensor.byte() # get byte sequence
    input_data = byte_seq.reshape(1, 2381) 
    
    return input_data

# Function to invoke SageMaker endpoint with file content
def invoke_sagemaker_endpoint(executable_content):
    # Initialize SageMaker client
    try:
        sm_client = boto3.client('sagemaker-runtime', region_name='us-east-1')

        payload = {'inputs': preprocess_PE_file(executable_content, input_length = 2000000).cpu().numpy().tolist()}
        payload = json.dumps(payload)
    #     Invoke SageMaker endpoint
        response = sm_client.invoke_endpoint(
            EndpointName='pytorch-inference-2024-04-02-23-11-57-495',
            ContentType='application/json',
            Body=json.dumps(payload)
        )

        # Check response status code
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            # Extract and return output from response
            output = response['Body']
            return output
        else:
            st.error(f"Failed to invoke SageMaker endpoint. Status code: {response['ResponseMetadata']['HTTPStatusCode']}")
            return None
    
    except Exception as e:
        st.error(f"An error occurred while invoking SageMaker endpoint: {str(e)}")

# Streamlit app
def main():
    st.title('SageMaker Endpoint Invoker')

    # File uploader
    st.write("Upload your executable file")
    file = st.file_uploader("Upload file", type=["exe"])

    if file is not None:
        # Read the contents of the uploaded file
        file_contents = file.read()

        # # Display file content
        # st.write("### Uploaded File Content:")
        # st.code(file_contents)

        # Button to invoke SageMaker endpoint
        if st.button("Invoke SageMaker Endpoint"):
            # Invoke SageMaker endpoint with file content
            output = invoke_sagemaker_endpoint(file_contents)

            if output:
                # Display output
                st.write("### Output:")
                st.code(output)
            else:
                st.error("Failed to get output from SageMaker endpoint.")


if __name__ == "__main__":
    main()
